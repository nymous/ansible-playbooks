- name: Install Nginx
  become: true
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
    name:
      - nginx
    state: present

- name: Generate dhparams if not already existing
  become: true
  ansible.builtin.command:
    cmd: openssl dhparam -out /etc/nginx/dhparams.pem 2048
    creates: /etc/nginx/dhparams.pem
  notify: "Reload Nginx"

# https://docs.ansible.com/ansible/latest/reference_appendices/faq.html#complex-configuration-validation
- name: Copy Nginx config, validate and rollback if validation fails
  notify: "Reload Nginx"
  block:
    - name: Copy Nginx config
      become: true
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/nginx/{{ item }}
        owner: root
        group: root
        mode: "644"
        backup: true
      loop:
        - nginx.conf
        - snippets/security.conf
        - snippets/ssl-options.conf
      register: config_files

    - name: Check Nginx configuration
      become: true
      ansible.builtin.command:
        cmd: /usr/sbin/nginx -t -c /etc/nginx/nginx.conf
      changed_when: false
      when: config_files is changed # noqa: no-handler

  rescue:
    - name: Restore previous configuration
      become: true
      ansible.builtin.copy:
        remote_src: true
        src: "{{ item['backup_file'] }}"
        dest: "{{ item['dest'] }}"
        owner: root
        group: root
        mode: "644"
      loop: "{{ config_files.results }}"
      when: item is changed # noqa: no-handler

  always:
    - name: Delete backups
      become: true
      ansible.builtin.file:
        path: "{{ item['backup_file'] }}"
        state: absent
      loop: "{{ config_files.results }}"
      when: item is changed # noqa: no-handler

- name: Allow Nginx in firewall
  become: true
  community.general.ufw:
    rule: allow
    name: Nginx Full
  notify: "Reload UFW"
